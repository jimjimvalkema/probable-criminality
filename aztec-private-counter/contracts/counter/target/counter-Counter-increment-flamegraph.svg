<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = true;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Artifact: /tmp/counter-Counter-increment.json, Function: main</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="28355"><g><title>acir::arithmetic (697 gates, 2.46%)</title><rect x="0.0000%" y="469" width="2.4581%" height="23" fill="rgb(255,226,226)" fg:x="0" fg:w="697"/><text x="0.2500%" y="483.50">ac..</text></g><g><title>acir::blackbox::range (3,061 gates, 10.80%)</title><rect x="2.4581%" y="469" width="10.7953%" height="23" fill="rgb(255,200,200)" fg:x="697" fg:w="3061"/><text x="2.7081%" y="483.50">acir::blackbox::..</text></g><g><title>acir::memory::init (1,432 gates, 5.05%)</title><rect x="13.2534%" y="469" width="5.0503%" height="23" fill="rgb(255,216,216)" fg:x="3758" fg:w="1432"/><text x="13.5034%" y="483.50">acir::..</text></g><g><title>point.nr:16:12::!p.is_infinite (1 gates, 0.00%)</title><rect x="18.3037%" y="253" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5190" fg:w="1"/><text x="18.5537%" y="267.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="18.3037%" y="229" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5190" fg:w="1"/><text x="18.5537%" y="243.50"></text></g><g><title>acir::blackbox::range (40 gates, 0.14%)</title><rect x="18.3072%" y="181" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="5191" fg:w="40"/><text x="18.5572%" y="195.50"></text></g><g><title>mod.nr:169:21::self.to_be_radix (46 gates, 0.16%)</title><rect x="18.3072%" y="229" width="0.1622%" height="23" fill="rgb(255,244,244)" fg:x="5191" fg:w="46"/><text x="18.5572%" y="243.50"></text></g><g><title>mod.nr:207:9::self.__to_be_radix (46 gates, 0.16%)</title><rect x="18.3072%" y="205" width="0.1622%" height="23" fill="rgb(255,244,244)" fg:x="5191" fg:w="46"/><text x="18.5572%" y="219.50"></text></g><g><title>acir::memory::init (6 gates, 0.02%)</title><rect x="18.4482%" y="181" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5231" fg:w="6"/><text x="18.6982%" y="195.50"></text></g><g><title>mod.nr:178:25::bytes[i] != p[i] (124 gates, 0.44%)</title><rect x="18.4694%" y="229" width="0.4373%" height="23" fill="rgb(255,240,240)" fg:x="5237" fg:w="124"/><text x="18.7194%" y="243.50"></text></g><g><title>acir::arithmetic (124 gates, 0.44%)</title><rect x="18.4694%" y="205" width="0.4373%" height="23" fill="rgb(255,240,240)" fg:x="5237" fg:w="124"/><text x="18.7194%" y="219.50"></text></g><g><title>acir::arithmetic (174 gates, 0.61%)</title><rect x="18.9067%" y="205" width="0.6136%" height="23" fill="rgb(255,238,238)" fg:x="5361" fg:w="174"/><text x="19.1567%" y="219.50"></text></g><g><title>mod.nr:179:32::bytes[i] &lt; p[i] (239 gates, 0.84%)</title><rect x="18.9067%" y="229" width="0.8429%" height="23" fill="rgb(255,236,236)" fg:x="5361" fg:w="239"/><text x="19.1567%" y="243.50"></text></g><g><title>acir::blackbox::range (65 gates, 0.23%)</title><rect x="19.5204%" y="205" width="0.2292%" height="23" fill="rgb(255,242,242)" fg:x="5535" fg:w="65"/><text x="19.7704%" y="219.50"></text></g><g><title>point.nr:18:32::p.x.to_be_bytes (410 gates, 1.45%)</title><rect x="18.3072%" y="253" width="1.4460%" height="23" fill="rgb(255,232,232)" fg:x="5191" fg:w="410"/><text x="18.5572%" y="267.50"></text></g><g><title>mod.nr:184:20::ok (1 gates, 0.00%)</title><rect x="19.7496%" y="229" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5600" fg:w="1"/><text x="19.9996%" y="243.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="19.7496%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5600" fg:w="1"/><text x="19.9996%" y="219.50"></text></g><g><title>bn254.nr:105:15::a == b (2 gates, 0.01%)</title><rect x="19.7531%" y="157" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5601" fg:w="2"/><text x="20.0031%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="19.7531%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5601" fg:w="2"/><text x="20.0031%" y="147.50"></text></g><g><title>bn254.nr:110:16::field_less_than(a, b) (1 gates, 0.00%)</title><rect x="19.7602%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5603" fg:w="1"/><text x="20.0102%" y="171.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="19.7602%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5603" fg:w="1"/><text x="20.0102%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="19.7637%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5604" fg:w="1"/><text x="20.0137%" y="75.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.7637%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5604" fg:w="8"/><text x="20.0137%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.7637%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5604" fg:w="8"/><text x="20.0137%" y="99.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="19.7672%" y="61" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5605" fg:w="7"/><text x="20.0172%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="19.7919%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5612" fg:w="1"/><text x="20.0419%" y="75.50"></text></g><g><title>bn254.nr:87:23::decompose(a) (15 gates, 0.05%)</title><rect x="19.7637%" y="133" width="0.0529%" height="23" fill="rgb(255,246,246)" fg:x="5604" fg:w="15"/><text x="20.0137%" y="147.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="19.7919%" y="109" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5612" fg:w="7"/><text x="20.0419%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="19.7919%" y="85" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5612" fg:w="7"/><text x="20.0419%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="19.7955%" y="61" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5613" fg:w="6"/><text x="20.0455%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="19.8166%" y="61" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5619" fg:w="2"/><text x="20.0666%" y="75.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.8166%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5619" fg:w="8"/><text x="20.0666%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.8166%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5619" fg:w="8"/><text x="20.0666%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="19.8237%" y="61" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5621" fg:w="6"/><text x="20.0737%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="19.8448%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5627" fg:w="1"/><text x="20.0948%" y="75.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.8448%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5627" fg:w="8"/><text x="20.0948%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.8448%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5627" fg:w="8"/><text x="20.0948%" y="99.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="19.8484%" y="61" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5628" fg:w="7"/><text x="20.0984%" y="75.50"></text></g><g><title>bn254.nr:70:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="19.8730%" y="109" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="5635" fg:w="3"/><text x="20.1230%" y="123.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="19.8730%" y="85" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="5635" fg:w="3"/><text x="20.1230%" y="99.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="19.8836%" y="85" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5638" fg:w="1"/><text x="20.1336%" y="99.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="19.8836%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5638" fg:w="1"/><text x="20.1336%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="19.8871%" y="37" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5639" fg:w="2"/><text x="20.1371%" y="51.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (9 gates, 0.03%)</title><rect x="19.8871%" y="85" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="5639" fg:w="9"/><text x="20.1371%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="19.8871%" y="61" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="5639" fg:w="9"/><text x="20.1371%" y="75.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="19.8942%" y="37" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5641" fg:w="7"/><text x="20.1442%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="19.9189%" y="37" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5648" fg:w="1"/><text x="20.1689%" y="51.50"></text></g><g><title>bn254.nr:88:23::decompose(b) (36 gates, 0.13%)</title><rect x="19.8166%" y="133" width="0.1270%" height="23" fill="rgb(255,244,244)" fg:x="5619" fg:w="36"/><text x="20.0666%" y="147.50"></text></g><g><title>bn254.nr:73:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (17 gates, 0.06%)</title><rect x="19.8836%" y="109" width="0.0600%" height="23" fill="rgb(255,246,246)" fg:x="5638" fg:w="17"/><text x="20.1336%" y="123.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="19.9189%" y="85" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5648" fg:w="7"/><text x="20.1689%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="19.9189%" y="61" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5648" fg:w="7"/><text x="20.1689%" y="75.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="19.9224%" y="37" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5649" fg:w="6"/><text x="20.1724%" y="51.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="19.9436%" y="109" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5655" fg:w="1"/><text x="20.1936%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="19.9436%" y="85" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5655" fg:w="1"/><text x="20.1936%" y="99.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="19.9471%" y="61" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5656" fg:w="2"/><text x="20.1971%" y="75.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.9471%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5656" fg:w="8"/><text x="20.1971%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.9471%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5656" fg:w="8"/><text x="20.1971%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="19.9542%" y="61" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5658" fg:w="6"/><text x="20.2042%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="19.9753%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5664" fg:w="1"/><text x="20.2253%" y="75.50"></text></g><g><title>bn254.nr:111:17::assert_gt(b, a) (68 gates, 0.24%)</title><rect x="19.7637%" y="157" width="0.2398%" height="23" fill="rgb(255,242,242)" fg:x="5604" fg:w="68"/><text x="20.0137%" y="171.50"></text></g><g><title>bn254.nr:91:9::assert_gt_limbs(a_limbs, b_limbs) (17 gates, 0.06%)</title><rect x="19.9436%" y="133" width="0.0600%" height="23" fill="rgb(255,246,246)" fg:x="5655" fg:w="17"/><text x="20.1936%" y="147.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.9753%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5664" fg:w="8"/><text x="20.2253%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="19.9753%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5664" fg:w="8"/><text x="20.2253%" y="99.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="19.9788%" y="61" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5665" fg:w="7"/><text x="20.2288%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="20.0035%" y="61" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5672" fg:w="2"/><text x="20.2535%" y="75.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (9 gates, 0.03%)</title><rect x="20.0035%" y="109" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="5672" fg:w="9"/><text x="20.2535%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="20.0035%" y="85" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="5672" fg:w="9"/><text x="20.2535%" y="99.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="20.0106%" y="61" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5674" fg:w="7"/><text x="20.2606%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="20.0353%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5681" fg:w="1"/><text x="20.2853%" y="75.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="20.0353%" y="109" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5681" fg:w="7"/><text x="20.2853%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="20.0353%" y="85" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5681" fg:w="7"/><text x="20.2853%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="20.0388%" y="61" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5682" fg:w="6"/><text x="20.2888%" y="75.50"></text></g><g><title>bn254.nr:70:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="20.0600%" y="109" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="5688" fg:w="3"/><text x="20.3100%" y="123.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="20.0600%" y="85" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="5688" fg:w="3"/><text x="20.3100%" y="99.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="20.0705%" y="85" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5691" fg:w="1"/><text x="20.3205%" y="99.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="20.0705%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5691" fg:w="1"/><text x="20.3205%" y="75.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="20.0741%" y="37" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5692" fg:w="2"/><text x="20.3241%" y="51.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.0741%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5692" fg:w="8"/><text x="20.3241%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.0741%" y="61" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5692" fg:w="8"/><text x="20.3241%" y="75.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="20.0811%" y="37" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5694" fg:w="6"/><text x="20.3311%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="20.1023%" y="37" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5700" fg:w="1"/><text x="20.3523%" y="51.50"></text></g><g><title>bn254.nr:87:23::decompose(a) (36 gates, 0.13%)</title><rect x="20.0035%" y="133" width="0.1270%" height="23" fill="rgb(255,244,244)" fg:x="5672" fg:w="36"/><text x="20.2535%" y="147.50"></text></g><g><title>bn254.nr:73:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (17 gates, 0.06%)</title><rect x="20.0705%" y="109" width="0.0600%" height="23" fill="rgb(255,246,246)" fg:x="5691" fg:w="17"/><text x="20.3205%" y="123.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.1023%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5700" fg:w="8"/><text x="20.3523%" y="99.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.1023%" y="61" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5700" fg:w="8"/><text x="20.3523%" y="75.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="20.1058%" y="37" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5701" fg:w="7"/><text x="20.3558%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="20.1305%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5708" fg:w="1"/><text x="20.3805%" y="75.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.1305%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5708" fg:w="8"/><text x="20.3805%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.1305%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5708" fg:w="8"/><text x="20.3805%" y="99.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="20.1340%" y="61" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5709" fg:w="7"/><text x="20.3840%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="20.1587%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5716" fg:w="1"/><text x="20.4087%" y="75.50"></text></g><g><title>bn254.nr:88:23::decompose(b) (15 gates, 0.05%)</title><rect x="20.1305%" y="133" width="0.0529%" height="23" fill="rgb(255,246,246)" fg:x="5708" fg:w="15"/><text x="20.3805%" y="147.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="20.1587%" y="109" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5716" fg:w="7"/><text x="20.4087%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="20.1587%" y="85" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5716" fg:w="7"/><text x="20.4087%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="20.1622%" y="61" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5717" fg:w="6"/><text x="20.4122%" y="75.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="20.1834%" y="109" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5723" fg:w="1"/><text x="20.4334%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="20.1834%" y="85" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5723" fg:w="1"/><text x="20.4334%" y="99.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="20.1869%" y="61" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5724" fg:w="2"/><text x="20.4369%" y="75.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.1869%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5724" fg:w="8"/><text x="20.4369%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.1869%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5724" fg:w="8"/><text x="20.4369%" y="99.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="20.1940%" y="61" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="5726" fg:w="6"/><text x="20.4440%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="20.2151%" y="61" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5732" fg:w="1"/><text x="20.4651%" y="75.50"></text></g><g><title>point.nr:20:8::get_sign_of_point(p) (139 gates, 0.49%)</title><rect x="19.7531%" y="253" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="5601" fg:w="139"/><text x="20.0031%" y="267.50"></text></g><g><title>point.nr:39:6::BN254_FR_MODULUS_DIV_2.lt (139 gates, 0.49%)</title><rect x="19.7531%" y="229" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="5601" fg:w="139"/><text x="20.0031%" y="243.50"></text></g><g><title>mod.nr:240:13::bn254_lt(self, another) (139 gates, 0.49%)</title><rect x="19.7531%" y="205" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="5601" fg:w="139"/><text x="20.0031%" y="219.50"></text></g><g><title>bn254.nr:122:5::gt(b, a) (139 gates, 0.49%)</title><rect x="19.7531%" y="181" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="5601" fg:w="139"/><text x="20.0031%" y="195.50"></text></g><g><title>bn254.nr:114:17::assert_gt(a, b) (68 gates, 0.24%)</title><rect x="20.0035%" y="157" width="0.2398%" height="23" fill="rgb(255,242,242)" fg:x="5672" fg:w="68"/><text x="20.2535%" y="171.50"></text></g><g><title>bn254.nr:91:9::assert_gt_limbs(a_limbs, b_limbs) (17 gates, 0.06%)</title><rect x="20.1834%" y="133" width="0.0600%" height="23" fill="rgb(255,246,246)" fg:x="5723" fg:w="17"/><text x="20.4334%" y="147.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.2151%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5732" fg:w="8"/><text x="20.4651%" y="123.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="20.2151%" y="85" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="5732" fg:w="8"/><text x="20.4651%" y="99.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="20.2187%" y="61" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="5733" fg:w="7"/><text x="20.4687%" y="75.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="20.2433%" y="229" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="5740" fg:w="1"/><text x="20.4933%" y="243.50"></text></g><g><title>point.nr:25:9::result[0] += 128 (3 gates, 0.01%)</title><rect x="20.2433%" y="253" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="5740" fg:w="3"/><text x="20.4933%" y="267.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="20.2469%" y="229" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="5741" fg:w="2"/><text x="20.4969%" y="243.50"></text></g><g><title>aes128.nr:34:41::point_to_bytes(shared_secret) (577 gates, 2.03%)</title><rect x="18.3037%" y="277" width="2.0349%" height="23" fill="rgb(255,228,228)" fg:x="5190" fg:w="577"/><text x="18.5537%" y="291.50">a..</text></g><g><title>point.nr:25:9::result[0] (24 gates, 0.08%)</title><rect x="20.2539%" y="253" width="0.0846%" height="23" fill="rgb(255,245,245)" fg:x="5743" fg:w="24"/><text x="20.5039%" y="267.50"></text></g><g><title>acir::memory::op (24 gates, 0.08%)</title><rect x="20.2539%" y="229" width="0.0846%" height="23" fill="rgb(255,245,245)" fg:x="5743" fg:w="24"/><text x="20.5039%" y="243.50"></text></g><g><title>acir::arithmetic (30 gates, 0.11%)</title><rect x="20.3386%" y="253" width="0.1058%" height="23" fill="rgb(255,245,245)" fg:x="5767" fg:w="30"/><text x="20.5886%" y="267.50"></text></g><g><title>aes128.nr:38:49::shared_secret_bytes[i] (216 gates, 0.76%)</title><rect x="20.3386%" y="277" width="0.7618%" height="23" fill="rgb(255,236,236)" fg:x="5767" fg:w="216"/><text x="20.5886%" y="291.50"></text></g><g><title>acir::memory::op (186 gates, 0.66%)</title><rect x="20.4444%" y="253" width="0.6560%" height="23" fill="rgb(255,237,237)" fg:x="5797" fg:w="186"/><text x="20.6944%" y="267.50"></text></g><g><title>sha256.nr:110:30::attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) (17 gates, 0.06%)</title><rect x="21.1003%" y="229" width="0.0600%" height="23" fill="rgb(255,246,246)" fg:x="5983" fg:w="17"/><text x="21.3503%" y="243.50"></text></g><g><title>acir::blackbox::range (17 gates, 0.06%)</title><rect x="21.1003%" y="205" width="0.0600%" height="23" fill="rgb(255,246,246)" fg:x="5983" fg:w="17"/><text x="21.3503%" y="219.50"></text></g><g><title>sha256.nr:289:19::msg_block[int_byte_ptr] % mask, zero (1 gates, 0.00%)</title><rect x="21.1603%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6000" fg:w="1"/><text x="21.4103%" y="195.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="21.1603%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6000" fg:w="1"/><text x="21.4103%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="21.1638%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6001" fg:w="1"/><text x="21.4138%" y="171.50"></text></g><g><title>sha256.nr:289:19::msg_block[int_byte_ptr] % mask (3 gates, 0.01%)</title><rect x="21.1638%" y="181" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="6001" fg:w="3"/><text x="21.4138%" y="195.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="21.1673%" y="157" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="6002" fg:w="2"/><text x="21.4173%" y="171.50"></text></g><g><title>sha256.nr:483:5::verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR) (9 gates, 0.03%)</title><rect x="21.1603%" y="205" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="6000" fg:w="9"/><text x="21.4103%" y="219.50"></text></g><g><title>sha256.nr:296:23::msg_block[i], zero (5 gates, 0.02%)</title><rect x="21.1744%" y="181" width="0.0176%" height="23" fill="rgb(255,248,248)" fg:x="6004" fg:w="5"/><text x="21.4244%" y="195.50"></text></g><g><title>acir::arithmetic (5 gates, 0.02%)</title><rect x="21.1744%" y="157" width="0.0176%" height="23" fill="rgb(255,248,248)" fg:x="6004" fg:w="5"/><text x="21.4244%" y="171.50"></text></g><g><title>sha256.nr:486:5::verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr) (1 gates, 0.00%)</title><rect x="21.1920%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6009" fg:w="1"/><text x="21.4420%" y="219.50"></text></g><g><title>sha256.nr:327:19::msg_block[int_byte_ptr], msg_item (1 gates, 0.00%)</title><rect x="21.1920%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6009" fg:w="1"/><text x="21.4420%" y="195.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="21.1920%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6009" fg:w="1"/><text x="21.4420%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="21.1956%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6010" fg:w="1"/><text x="21.4456%" y="195.50"></text></g><g><title>sha256.nr:491:29::reconstructed_len * TWO_POW_32 (4 gates, 0.01%)</title><rect x="21.1956%" y="205" width="0.0141%" height="23" fill="rgb(255,248,248)" fg:x="6010" fg:w="4"/><text x="21.4456%" y="219.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.01%)</title><rect x="21.1991%" y="181" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="6011" fg:w="3"/><text x="21.4491%" y="195.50"></text></g><g><title>sha256.nr:112:9::verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size) (15 gates, 0.05%)</title><rect x="21.1603%" y="229" width="0.0529%" height="23" fill="rgb(255,246,246)" fg:x="6000" fg:w="15"/><text x="21.4103%" y="243.50"></text></g><g><title>sha256.nr:495:15::reconstructed_len, len (1 gates, 0.00%)</title><rect x="21.2097%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6014" fg:w="1"/><text x="21.4597%" y="219.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="21.2097%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="6014" fg:w="1"/><text x="21.4597%" y="195.50"></text></g><g><title>acir::arithmetic (9 gates, 0.03%)</title><rect x="21.2132%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="6015" fg:w="9"/><text x="21.4632%" y="195.50"></text></g><g><title>sha256.nr:502:13::sha256_compression(msg_block, state) (3,904 gates, 13.77%)</title><rect x="21.2132%" y="205" width="13.7683%" height="23" fill="rgb(255,194,194)" fg:x="6015" fg:w="3904"/><text x="21.4632%" y="219.50">sha256.nr:502:13::sha..</text></g><g><title>acir::blackbox::sha256_compression (3,895 gates, 13.74%)</title><rect x="21.2449%" y="181" width="13.7366%" height="23" fill="rgb(255,194,194)" fg:x="6024" fg:w="3895"/><text x="21.4949%" y="195.50">acir::blackbox::sha25..</text></g><g><title>sha256.nr:114:9::hash_final_block(msg_block, h) (3,944 gates, 13.91%)</title><rect x="21.2132%" y="229" width="13.9094%" height="23" fill="rgb(255,194,194)" fg:x="6015" fg:w="3944"/><text x="21.4632%" y="243.50">sha256.nr:114:9::hash..</text></g><g><title>sha256.nr:506:32::(state[j] as Field).to_be_bytes (40 gates, 0.14%)</title><rect x="34.9815%" y="205" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="9919" fg:w="40"/><text x="35.2315%" y="219.50"></text></g><g><title>mod.nr:169:21::self.to_be_radix (40 gates, 0.14%)</title><rect x="34.9815%" y="181" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="9919" fg:w="40"/><text x="35.2315%" y="195.50"></text></g><g><title>mod.nr:207:9::self.__to_be_radix (40 gates, 0.14%)</title><rect x="34.9815%" y="157" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="9919" fg:w="40"/><text x="35.2315%" y="171.50"></text></g><g><title>acir::blackbox::range (40 gates, 0.14%)</title><rect x="34.9815%" y="133" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="9919" fg:w="40"/><text x="35.2315%" y="147.50"></text></g><g><title>sha256.nr:75:26::build_msg_block(msg, message_size, msg_start) (15 gates, 0.05%)</title><rect x="35.1226%" y="229" width="0.0529%" height="23" fill="rgb(255,246,246)" fg:x="9959" fg:w="15"/><text x="35.3726%" y="243.50"></text></g><g><title>acir::blackbox::range (15 gates, 0.05%)</title><rect x="35.1226%" y="205" width="0.0529%" height="23" fill="rgb(255,246,246)" fg:x="9959" fg:w="15"/><text x="35.3726%" y="219.50"></text></g><g><title>sha256.nr:238:27::msg_block[i], msg_item as u32 (1 gates, 0.00%)</title><rect x="35.1755%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="9974" fg:w="1"/><text x="35.4255%" y="219.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="35.1755%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="9974" fg:w="1"/><text x="35.4255%" y="195.50"></text></g><g><title>acir::arithmetic (16 gates, 0.06%)</title><rect x="35.1790%" y="157" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="9975" fg:w="16"/><text x="35.4290%" y="171.50"></text></g><g><title>sha256.nr:244:20::lshift8(msg_item, 1) (44 gates, 0.16%)</title><rect x="35.1790%" y="205" width="0.1552%" height="23" fill="rgb(255,244,244)" fg:x="9975" fg:w="44"/><text x="35.4290%" y="219.50"></text></g><g><title>sha256.nr:400:13::item * TWO_POW_8 (44 gates, 0.16%)</title><rect x="35.1790%" y="181" width="0.1552%" height="23" fill="rgb(255,244,244)" fg:x="9975" fg:w="44"/><text x="35.4290%" y="195.50"></text></g><g><title>acir::blackbox::range (28 gates, 0.10%)</title><rect x="35.2354%" y="157" width="0.0987%" height="23" fill="rgb(255,245,245)" fg:x="9991" fg:w="28"/><text x="35.4854%" y="171.50"></text></g><g><title>acir::arithmetic (24 gates, 0.08%)</title><rect x="35.3342%" y="181" width="0.0846%" height="23" fill="rgb(255,245,245)" fg:x="10019" fg:w="24"/><text x="35.5842%" y="195.50"></text></g><g><title>sha256.nr:81:36::verify_msg_block(msg, message_size, msg_block, msg_start) (111 gates, 0.39%)</title><rect x="35.1755%" y="229" width="0.3915%" height="23" fill="rgb(255,240,240)" fg:x="9974" fg:w="111"/><text x="35.4255%" y="243.50"></text></g><g><title>sha256.nr:247:24::msg_item + msg[k] as u32 (66 gates, 0.23%)</title><rect x="35.3342%" y="205" width="0.2328%" height="23" fill="rgb(255,242,242)" fg:x="10019" fg:w="66"/><text x="35.5842%" y="219.50"></text></g><g><title>acir::blackbox::range (42 gates, 0.15%)</title><rect x="35.4188%" y="181" width="0.1481%" height="23" fill="rgb(255,244,244)" fg:x="10043" fg:w="42"/><text x="35.6688%" y="195.50"></text></g><g><title>encryption.nr:109:25::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(
        ciphertext_shared_secret,
    ) (4,902 gates, 17.29%)</title><rect x="18.3037%" y="349" width="17.2880%" height="23" fill="rgb(255,187,187)" fg:x="5190" fg:w="4902"/><text x="18.5537%" y="363.50">encryption.nr:109:25::deriv..</text></g><g><title>aes128.nr:63:5::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(
        shared_secret,
        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,
    ) (4,902 gates, 17.29%)</title><rect x="18.3037%" y="325" width="17.2880%" height="23" fill="rgb(255,187,187)" fg:x="5190" fg:w="4902"/><text x="18.5537%" y="339.50">aes128.nr:63:5::derive_aes_..</text></g><g><title>aes128.nr:49:27::randomness_extraction_fn(shared_secret) (4,902 gates, 17.29%)</title><rect x="18.3037%" y="301" width="17.2880%" height="23" fill="rgb(255,187,187)" fg:x="5190" fg:w="4902"/><text x="18.5537%" y="315.50">aes128.nr:49:27::randomness..</text></g><g><title>aes128.nr:42:5::sha256::digest(shared_secret_bytes_with_separator) (4,109 gates, 14.49%)</title><rect x="21.1003%" y="277" width="14.4913%" height="23" fill="rgb(255,192,192)" fg:x="5983" fg:w="4109"/><text x="21.3503%" y="291.50">aes128.nr:42:5::sha256..</text></g><g><title>sha256.nr:26:5::sha256_var(msg, N as u64) (4,109 gates, 14.49%)</title><rect x="21.1003%" y="253" width="14.4913%" height="23" fill="rgb(255,192,192)" fg:x="5983" fg:w="4109"/><text x="21.3503%" y="267.50">sha256.nr:26:5::sha256..</text></g><g><title>sha256.nr:84:17::verify_msg_block_padding(msg_block, msg_byte_ptr) (7 gates, 0.02%)</title><rect x="35.5669%" y="229" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="10085" fg:w="7"/><text x="35.8169%" y="243.50"></text></g><g><title>sha256.nr:259:5::verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE) (7 gates, 0.02%)</title><rect x="35.5669%" y="205" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="10085" fg:w="7"/><text x="35.8169%" y="219.50"></text></g><g><title>sha256.nr:296:23::msg_block[i], zero (7 gates, 0.02%)</title><rect x="35.5669%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="10085" fg:w="7"/><text x="35.8169%" y="195.50"></text></g><g><title>acir::arithmetic (7 gates, 0.02%)</title><rect x="35.5669%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="10085" fg:w="7"/><text x="35.8169%" y="171.50"></text></g><g><title>encryption.nr:113:28::aes128_encrypt(plaintext_bytes, iv, sym_key) (10,097 gates, 35.61%)</title><rect x="35.5916%" y="349" width="35.6092%" height="23" fill="rgb(255,160,160)" fg:x="10092" fg:w="10097"/><text x="35.8416%" y="363.50">encryption.nr:113:28::aes128_encrypt(plaintext_bytes, iv, ..</text></g><g><title>acir::blackbox::aes128_encrypt (10,097 gates, 35.61%)</title><rect x="35.5916%" y="325" width="35.6092%" height="23" fill="rgb(255,160,160)" fg:x="10092" fg:w="10097"/><text x="35.8416%" y="339.50">acir::blackbox::aes128_encrypt</text></g><g><title>mod.nr:169:21::self.to_be_radix (40 gates, 0.14%)</title><rect x="71.2008%" y="325" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="20189" fg:w="40"/><text x="71.4508%" y="339.50"></text></g><g><title>mod.nr:207:9::self.__to_be_radix (40 gates, 0.14%)</title><rect x="71.2008%" y="301" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="20189" fg:w="40"/><text x="71.4508%" y="315.50"></text></g><g><title>acir::blackbox::range (40 gates, 0.14%)</title><rect x="71.2008%" y="277" width="0.1411%" height="23" fill="rgb(255,244,244)" fg:x="20189" fg:w="40"/><text x="71.4508%" y="291.50"></text></g><g><title>mod.nr:178:25::bytes[i] != p[i] (124 gates, 0.44%)</title><rect x="71.3419%" y="325" width="0.4373%" height="23" fill="rgb(255,240,240)" fg:x="20229" fg:w="124"/><text x="71.5919%" y="339.50"></text></g><g><title>acir::arithmetic (124 gates, 0.44%)</title><rect x="71.3419%" y="301" width="0.4373%" height="23" fill="rgb(255,240,240)" fg:x="20229" fg:w="124"/><text x="71.5919%" y="315.50"></text></g><g><title>acir::arithmetic (174 gates, 0.61%)</title><rect x="71.7792%" y="301" width="0.6136%" height="23" fill="rgb(255,238,238)" fg:x="20353" fg:w="174"/><text x="72.0292%" y="315.50"></text></g><g><title>mod.nr:179:32::bytes[i] &lt; p[i] (239 gates, 0.84%)</title><rect x="71.7792%" y="325" width="0.8429%" height="23" fill="rgb(255,236,236)" fg:x="20353" fg:w="239"/><text x="72.0292%" y="339.50"></text></g><g><title>acir::blackbox::range (65 gates, 0.23%)</title><rect x="72.3929%" y="301" width="0.2292%" height="23" fill="rgb(255,242,242)" fg:x="20527" fg:w="65"/><text x="72.6429%" y="315.50"></text></g><g><title>encryption.nr:129:34::contract_address.to_field().to_be_bytes (404 gates, 1.42%)</title><rect x="71.2008%" y="349" width="1.4248%" height="23" fill="rgb(255,232,232)" fg:x="20189" fg:w="404"/><text x="71.4508%" y="363.50"></text></g><g><title>mod.nr:184:20::ok (1 gates, 0.00%)</title><rect x="72.6221%" y="325" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="20592" fg:w="1"/><text x="72.8721%" y="339.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="72.6221%" y="301" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="20592" fg:w="1"/><text x="72.8721%" y="315.50"></text></g><g><title>encryption.nr:154:35::aes128_encrypt(header_plaintext, iv, sym_key) (3,349 gates, 11.81%)</title><rect x="72.6256%" y="349" width="11.8110%" height="23" fill="rgb(255,198,198)" fg:x="20593" fg:w="3349"/><text x="72.8756%" y="363.50">encryption.nr:154:..</text></g><g><title>acir::blackbox::aes128_encrypt (3,349 gates, 11.81%)</title><rect x="72.6256%" y="325" width="11.8110%" height="23" fill="rgb(255,198,198)" fg:x="20593" fg:w="3349"/><text x="72.8756%" y="339.50">acir::blackbox::ae..</text></g><g><title>encryption.nr:166:45::get_random_bytes() (29 gates, 0.10%)</title><rect x="84.4366%" y="349" width="0.1023%" height="23" fill="rgb(255,245,245)" fg:x="23942" fg:w="29"/><text x="84.6866%" y="363.50"></text></g><g><title>acir::blackbox::range (29 gates, 0.10%)</title><rect x="84.4366%" y="325" width="0.1023%" height="23" fill="rgb(255,245,245)" fg:x="23942" fg:w="29"/><text x="84.6866%" y="339.50"></text></g><g><title>encryption.nr:235:36::get_random_bytes::&lt;31&gt;() (310 gates, 1.09%)</title><rect x="84.5389%" y="349" width="1.0933%" height="23" fill="rgb(255,234,234)" fg:x="23971" fg:w="310"/><text x="84.7889%" y="363.50"></text></g><g><title>acir::blackbox::range (310 gates, 1.09%)</title><rect x="84.5389%" y="325" width="1.0933%" height="23" fill="rgb(255,234,234)" fg:x="23971" fg:w="310"/><text x="84.7889%" y="339.50"></text></g><g><title>mod.nr:169:21::self.to_be_radix (120 gates, 0.42%)</title><rect x="85.6322%" y="301" width="0.4232%" height="23" fill="rgb(255,240,240)" fg:x="24281" fg:w="120"/><text x="85.8822%" y="315.50"></text></g><g><title>mod.nr:207:9::self.__to_be_radix (120 gates, 0.42%)</title><rect x="85.6322%" y="277" width="0.4232%" height="23" fill="rgb(255,240,240)" fg:x="24281" fg:w="120"/><text x="85.8822%" y="291.50"></text></g><g><title>acir::blackbox::range (120 gates, 0.42%)</title><rect x="85.6322%" y="253" width="0.4232%" height="23" fill="rgb(255,240,240)" fg:x="24281" fg:w="120"/><text x="85.8822%" y="267.50"></text></g><g><title>mod.nr:178:25::bytes[i] != p[i] (372 gates, 1.31%)</title><rect x="86.0554%" y="301" width="1.3119%" height="23" fill="rgb(255,232,232)" fg:x="24401" fg:w="372"/><text x="86.3054%" y="315.50"></text></g><g><title>acir::arithmetic (372 gates, 1.31%)</title><rect x="86.0554%" y="277" width="1.3119%" height="23" fill="rgb(255,232,232)" fg:x="24401" fg:w="372"/><text x="86.3054%" y="291.50"></text></g><g><title>acir::arithmetic (522 gates, 1.84%)</title><rect x="87.3673%" y="277" width="1.8409%" height="23" fill="rgb(255,229,229)" fg:x="24773" fg:w="522"/><text x="87.6173%" y="291.50">a..</text></g><g><title>mod.nr:179:32::bytes[i] &lt; p[i] (718 gates, 2.53%)</title><rect x="87.3673%" y="301" width="2.5322%" height="23" fill="rgb(255,226,226)" fg:x="24773" fg:w="718"/><text x="87.6173%" y="315.50">mo..</text></g><g><title>acir::blackbox::range (196 gates, 0.69%)</title><rect x="89.2083%" y="277" width="0.6912%" height="23" fill="rgb(255,237,237)" fg:x="25295" fg:w="196"/><text x="89.4583%" y="291.50"></text></g><g><title>encryption.nr:84:27::fields_to_bytes(plaintext) (1,213 gates, 4.28%)</title><rect x="85.6322%" y="349" width="4.2779%" height="23" fill="rgb(255,219,219)" fg:x="24281" fg:w="1213"/><text x="85.8822%" y="363.50">encry..</text></g><g><title>fields_to_bytes.nr:23:40::fields[i].to_be_bytes (1,213 gates, 4.28%)</title><rect x="85.6322%" y="325" width="4.2779%" height="23" fill="rgb(255,219,219)" fg:x="24281" fg:w="1213"/><text x="85.8822%" y="339.50">field..</text></g><g><title>mod.nr:184:20::ok (3 gates, 0.01%)</title><rect x="89.8995%" y="301" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="25491" fg:w="3"/><text x="90.1495%" y="315.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="89.8995%" y="277" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="25491" fg:w="3"/><text x="90.1495%" y="291.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (10 gates, 0.04%)</title><rect x="89.9101%" y="277" width="0.0353%" height="23" fill="rgb(255,247,247)" fg:x="25494" fg:w="10"/><text x="90.1601%" y="291.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (10 gates, 0.04%)</title><rect x="89.9101%" y="253" width="0.0353%" height="23" fill="rgb(255,247,247)" fg:x="25494" fg:w="10"/><text x="90.1601%" y="267.50"></text></g><g><title>acir::blackbox::range (10 gates, 0.04%)</title><rect x="89.9101%" y="229" width="0.0353%" height="23" fill="rgb(255,247,247)" fg:x="25494" fg:w="10"/><text x="90.1601%" y="243.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="89.9453%" y="277" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="25504" fg:w="7"/><text x="90.1953%" y="291.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="89.9453%" y="253" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="25504" fg:w="7"/><text x="90.1953%" y="267.50"></text></g><g><title>acir::blackbox::range (7 gates, 0.02%)</title><rect x="89.9453%" y="229" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="25504" fg:w="7"/><text x="90.1953%" y="243.50"></text></g><g><title>bn254.nr:70:23::x, xlo + TWO_POW_128 * xhi (1 gates, 0.00%)</title><rect x="89.9700%" y="277" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="25511" fg:w="1"/><text x="90.2200%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="89.9700%" y="253" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="25511" fg:w="1"/><text x="90.2200%" y="267.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="89.9735%" y="253" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="25512" fg:w="1"/><text x="90.2235%" y="267.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="89.9735%" y="229" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="25512" fg:w="1"/><text x="90.2235%" y="243.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="89.9771%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="25513" fg:w="1"/><text x="90.2271%" y="219.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (7 gates, 0.02%)</title><rect x="89.9771%" y="253" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="25513" fg:w="7"/><text x="90.2271%" y="267.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="89.9771%" y="229" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="25513" fg:w="7"/><text x="90.2271%" y="243.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="89.9806%" y="205" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="25514" fg:w="6"/><text x="90.2306%" y="219.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="90.0018%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="25520" fg:w="1"/><text x="90.2518%" y="219.50"></text></g><g><title>ephemeral.nr:18:18::EmbeddedCurveScalar::from_field(randomness) (33 gates, 0.12%)</title><rect x="89.9101%" y="325" width="0.1164%" height="23" fill="rgb(255,244,244)" fg:x="25494" fg:w="33"/><text x="90.1601%" y="339.50"></text></g><g><title>embedded_curve_ops.nr:71:22::crate::field::bn254::decompose(scalar) (33 gates, 0.12%)</title><rect x="89.9101%" y="301" width="0.1164%" height="23" fill="rgb(255,244,244)" fg:x="25494" fg:w="33"/><text x="90.1601%" y="315.50"></text></g><g><title>bn254.nr:73:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (15 gates, 0.05%)</title><rect x="89.9735%" y="277" width="0.0529%" height="23" fill="rgb(255,246,246)" fg:x="25512" fg:w="15"/><text x="90.2235%" y="291.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="90.0018%" y="253" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="25520" fg:w="7"/><text x="90.2518%" y="267.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="90.0018%" y="229" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="25520" fg:w="7"/><text x="90.2518%" y="243.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="90.0053%" y="205" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="25521" fg:w="6"/><text x="90.2553%" y="219.50"></text></g><g><title>encryption.nr:90:28::generate_ephemeral_key_pair() (652 gates, 2.30%)</title><rect x="89.9101%" y="349" width="2.2994%" height="23" fill="rgb(255,227,227)" fg:x="25494" fg:w="652"/><text x="90.1601%" y="363.50">e..</text></g><g><title>ephemeral.nr:19:18::fixed_base_scalar_mul(eph_sk) (619 gates, 2.18%)</title><rect x="90.0265%" y="325" width="2.1830%" height="23" fill="rgb(255,227,227)" fg:x="25527" fg:w="619"/><text x="90.2765%" y="339.50">e..</text></g><g><title>embedded_curve_ops.nr:129:5::multi_scalar_mul([g1], [scalar]) (619 gates, 2.18%)</title><rect x="90.0265%" y="301" width="2.1830%" height="23" fill="rgb(255,227,227)" fg:x="25527" fg:w="619"/><text x="90.2765%" y="315.50">e..</text></g><g><title>embedded_curve_ops.nr:110:23::multi_scalar_mul_array_return(points, scalars) (619 gates, 2.18%)</title><rect x="90.0265%" y="277" width="2.1830%" height="23" fill="rgb(255,227,227)" fg:x="25527" fg:w="619"/><text x="90.2765%" y="291.50">e..</text></g><g><title>acir::blackbox::multi_scalar_mul (619 gates, 2.18%)</title><rect x="90.0265%" y="253" width="2.1830%" height="23" fill="rgb(255,227,227)" fg:x="25527" fg:w="619"/><text x="90.2765%" y="267.50">a..</text></g><g><title>bn254.nr:105:15::a == b (2 gates, 0.01%)</title><rect x="92.2095%" y="253" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26146" fg:w="2"/><text x="92.4595%" y="267.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="92.2095%" y="229" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26146" fg:w="2"/><text x="92.4595%" y="243.50"></text></g><g><title>bn254.nr:110:16::field_less_than(a, b) (1 gates, 0.00%)</title><rect x="92.2165%" y="253" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26148" fg:w="1"/><text x="92.4665%" y="267.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="92.2165%" y="229" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26148" fg:w="1"/><text x="92.4665%" y="243.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.2201%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26149" fg:w="1"/><text x="92.4701%" y="171.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.2201%" y="205" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26149" fg:w="7"/><text x="92.4701%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.2201%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26149" fg:w="7"/><text x="92.4701%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.2236%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26150" fg:w="6"/><text x="92.4736%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.2448%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26156" fg:w="1"/><text x="92.4948%" y="171.50"></text></g><g><title>bn254.nr:87:23::decompose(a) (16 gates, 0.06%)</title><rect x="92.2201%" y="229" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="26149" fg:w="16"/><text x="92.4701%" y="243.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.2448%" y="205" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26156" fg:w="9"/><text x="92.4948%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.2448%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26156" fg:w="9"/><text x="92.4948%" y="195.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="92.2483%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26157" fg:w="8"/><text x="92.4983%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="92.2765%" y="157" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26165" fg:w="2"/><text x="92.5265%" y="171.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.2765%" y="205" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26165" fg:w="8"/><text x="92.5265%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.2765%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26165" fg:w="8"/><text x="92.5265%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.2835%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26167" fg:w="6"/><text x="92.5335%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.3047%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26173" fg:w="1"/><text x="92.5547%" y="171.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.3047%" y="205" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26173" fg:w="7"/><text x="92.5547%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.3047%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26173" fg:w="7"/><text x="92.5547%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.3082%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26174" fg:w="6"/><text x="92.5582%" y="171.50"></text></g><g><title>bn254.nr:70:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="92.3294%" y="205" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="26180" fg:w="3"/><text x="92.5794%" y="219.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="92.3294%" y="181" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="26180" fg:w="3"/><text x="92.5794%" y="195.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="92.3400%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26183" fg:w="1"/><text x="92.5900%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="92.3400%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26183" fg:w="1"/><text x="92.5900%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="92.3435%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26184" fg:w="2"/><text x="92.5935%" y="147.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.3435%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26184" fg:w="8"/><text x="92.5935%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.3435%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26184" fg:w="8"/><text x="92.5935%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.3506%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26186" fg:w="6"/><text x="92.6006%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.3717%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26192" fg:w="1"/><text x="92.6217%" y="147.50"></text></g><g><title>bn254.nr:88:23::decompose(b) (36 gates, 0.13%)</title><rect x="92.2765%" y="229" width="0.1270%" height="23" fill="rgb(255,244,244)" fg:x="26165" fg:w="36"/><text x="92.5265%" y="243.50"></text></g><g><title>bn254.nr:73:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (18 gates, 0.06%)</title><rect x="92.3400%" y="205" width="0.0635%" height="23" fill="rgb(255,246,246)" fg:x="26183" fg:w="18"/><text x="92.5900%" y="219.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.3717%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26192" fg:w="9"/><text x="92.6217%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.3717%" y="157" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26192" fg:w="9"/><text x="92.6217%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="92.3752%" y="133" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26193" fg:w="8"/><text x="92.6252%" y="147.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="92.4035%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26201" fg:w="1"/><text x="92.6535%" y="219.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="92.4035%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26201" fg:w="1"/><text x="92.6535%" y="195.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="92.4070%" y="157" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26202" fg:w="2"/><text x="92.6570%" y="171.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.4070%" y="205" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26202" fg:w="8"/><text x="92.6570%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.4070%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26202" fg:w="8"/><text x="92.6570%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.4140%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26204" fg:w="6"/><text x="92.6640%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.4352%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26210" fg:w="1"/><text x="92.6852%" y="171.50"></text></g><g><title>bn254.nr:111:17::assert_gt(b, a) (68 gates, 0.24%)</title><rect x="92.2201%" y="253" width="0.2398%" height="23" fill="rgb(255,242,242)" fg:x="26149" fg:w="68"/><text x="92.4701%" y="267.50"></text></g><g><title>bn254.nr:91:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="92.4035%" y="229" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="26201" fg:w="16"/><text x="92.6535%" y="243.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.4352%" y="205" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26210" fg:w="7"/><text x="92.6852%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.4352%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26210" fg:w="7"/><text x="92.6852%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.4387%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26211" fg:w="6"/><text x="92.6887%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="92.4599%" y="157" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26217" fg:w="2"/><text x="92.7099%" y="171.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.4599%" y="205" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26217" fg:w="8"/><text x="92.7099%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.4599%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26217" fg:w="8"/><text x="92.7099%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.4669%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26219" fg:w="6"/><text x="92.7169%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.4881%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26225" fg:w="1"/><text x="92.7381%" y="171.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.4881%" y="205" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26225" fg:w="9"/><text x="92.7381%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.4881%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26225" fg:w="9"/><text x="92.7381%" y="195.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="92.4916%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26226" fg:w="8"/><text x="92.7416%" y="171.50"></text></g><g><title>bn254.nr:70:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="92.5198%" y="205" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="26234" fg:w="3"/><text x="92.7698%" y="219.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="92.5198%" y="181" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="26234" fg:w="3"/><text x="92.7698%" y="195.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="92.5304%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26237" fg:w="1"/><text x="92.7804%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="92.5304%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26237" fg:w="1"/><text x="92.7804%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="92.5339%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26238" fg:w="2"/><text x="92.7839%" y="147.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.5339%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26238" fg:w="8"/><text x="92.7839%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.5339%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26238" fg:w="8"/><text x="92.7839%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.5410%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26240" fg:w="6"/><text x="92.7910%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.5622%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26246" fg:w="1"/><text x="92.8122%" y="147.50"></text></g><g><title>bn254.nr:87:23::decompose(a) (36 gates, 0.13%)</title><rect x="92.4599%" y="229" width="0.1270%" height="23" fill="rgb(255,244,244)" fg:x="26217" fg:w="36"/><text x="92.7099%" y="243.50"></text></g><g><title>bn254.nr:73:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (16 gates, 0.06%)</title><rect x="92.5304%" y="205" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="26237" fg:w="16"/><text x="92.7804%" y="219.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.5622%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26246" fg:w="7"/><text x="92.8122%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.5622%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26246" fg:w="7"/><text x="92.8122%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.5657%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26247" fg:w="6"/><text x="92.8157%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.5868%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26253" fg:w="1"/><text x="92.8368%" y="171.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.5868%" y="205" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26253" fg:w="7"/><text x="92.8368%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.5868%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26253" fg:w="7"/><text x="92.8368%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.5904%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26254" fg:w="6"/><text x="92.8404%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.6115%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26260" fg:w="1"/><text x="92.8615%" y="171.50"></text></g><g><title>bn254.nr:88:23::decompose(b) (16 gates, 0.06%)</title><rect x="92.5868%" y="229" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="26253" fg:w="16"/><text x="92.8368%" y="243.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.6115%" y="205" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26260" fg:w="9"/><text x="92.8615%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="92.6115%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="26260" fg:w="9"/><text x="92.8615%" y="195.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="92.6151%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26261" fg:w="8"/><text x="92.8651%" y="171.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="92.6433%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26269" fg:w="1"/><text x="92.8933%" y="219.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="92.6433%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26269" fg:w="1"/><text x="92.8933%" y="195.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="92.6468%" y="157" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="26270" fg:w="2"/><text x="92.8968%" y="171.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.6468%" y="205" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26270" fg:w="8"/><text x="92.8968%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="92.6468%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="26270" fg:w="8"/><text x="92.8968%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.6539%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26272" fg:w="6"/><text x="92.9039%" y="171.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.6750%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26278" fg:w="1"/><text x="92.9250%" y="171.50"></text></g><g><title>encryption.nr:92:32::get_sign_of_point(eph_pk) (139 gates, 0.49%)</title><rect x="92.2095%" y="349" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="26146" fg:w="139"/><text x="92.4595%" y="363.50"></text></g><g><title>point.nr:39:6::BN254_FR_MODULUS_DIV_2.lt (139 gates, 0.49%)</title><rect x="92.2095%" y="325" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="26146" fg:w="139"/><text x="92.4595%" y="339.50"></text></g><g><title>mod.nr:240:13::bn254_lt(self, another) (139 gates, 0.49%)</title><rect x="92.2095%" y="301" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="26146" fg:w="139"/><text x="92.4595%" y="315.50"></text></g><g><title>bn254.nr:122:5::gt(b, a) (139 gates, 0.49%)</title><rect x="92.2095%" y="277" width="0.4902%" height="23" fill="rgb(255,239,239)" fg:x="26146" fg:w="139"/><text x="92.4595%" y="291.50"></text></g><g><title>bn254.nr:114:17::assert_gt(a, b) (68 gates, 0.24%)</title><rect x="92.4599%" y="253" width="0.2398%" height="23" fill="rgb(255,242,242)" fg:x="26217" fg:w="68"/><text x="92.7099%" y="267.50"></text></g><g><title>bn254.nr:91:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="92.6433%" y="229" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="26269" fg:w="16"/><text x="92.8933%" y="243.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.6750%" y="205" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26278" fg:w="7"/><text x="92.9250%" y="219.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="92.6750%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="26278" fg:w="7"/><text x="92.9250%" y="195.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="92.6785%" y="157" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="26279" fg:w="6"/><text x="92.9285%" y="171.50"></text></g><g><title>aztec_address.nr:88:25::pow(x, 3) (1 gates, 0.00%)</title><rect x="92.6997%" y="301" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26285" fg:w="1"/><text x="92.9497%" y="315.50"></text></g><g><title>field.nr:64:9::r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field) (1 gates, 0.00%)</title><rect x="92.6997%" y="277" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26285" fg:w="1"/><text x="92.9497%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="92.6997%" y="253" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26285" fg:w="1"/><text x="92.9497%" y="267.50"></text></g><g><title>field.nr:63:9::r *= r (224 gates, 0.79%)</title><rect x="92.7032%" y="253" width="0.7900%" height="23" fill="rgb(255,236,236)" fg:x="26286" fg:w="224"/><text x="92.9532%" y="267.50"></text></g><g><title>acir::arithmetic (224 gates, 0.79%)</title><rect x="92.7032%" y="229" width="0.7900%" height="23" fill="rgb(255,236,236)" fg:x="26286" fg:w="224"/><text x="92.9532%" y="243.50"></text></g><g><title>field.nr:76:17::pow(x, C3) (322 gates, 1.14%)</title><rect x="92.7032%" y="277" width="1.1356%" height="23" fill="rgb(255,234,234)" fg:x="26286" fg:w="322"/><text x="92.9532%" y="291.50"></text></g><g><title>field.nr:64:9::r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field) (98 gates, 0.35%)</title><rect x="93.4932%" y="253" width="0.3456%" height="23" fill="rgb(255,241,241)" fg:x="26510" fg:w="98"/><text x="93.7432%" y="267.50"></text></g><g><title>acir::arithmetic (98 gates, 0.35%)</title><rect x="93.4932%" y="229" width="0.3456%" height="23" fill="rgb(255,241,241)" fg:x="26510" fg:w="98"/><text x="93.7432%" y="243.50"></text></g><g><title>field.nr:77:17::z * z * x (1 gates, 0.00%)</title><rect x="93.8388%" y="277" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26608" fg:w="1"/><text x="94.0888%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="93.8388%" y="253" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26608" fg:w="1"/><text x="94.0888%" y="267.50"></text></g><g><title>field.nr:77:17::z * z (1 gates, 0.00%)</title><rect x="93.8424%" y="277" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26609" fg:w="1"/><text x="94.0924%" y="291.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="93.8424%" y="253" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="26609" fg:w="1"/><text x="94.0924%" y="267.50"></text></g><g><title>field.nr:84:13::b *= b (351 gates, 1.24%)</title><rect x="93.8459%" y="277" width="1.2379%" height="23" fill="rgb(255,233,233)" fg:x="26610" fg:w="351"/><text x="94.0959%" y="291.50"></text></g><g><title>acir::arithmetic (351 gates, 1.24%)</title><rect x="93.8459%" y="253" width="1.2379%" height="23" fill="rgb(255,233,233)" fg:x="26610" fg:w="351"/><text x="94.0959%" y="267.50"></text></g><g><title>field.nr:87:17::b == 1 (81 gates, 0.29%)</title><rect x="95.0838%" y="277" width="0.2857%" height="23" fill="rgb(255,242,242)" fg:x="26961" fg:w="81"/><text x="95.3338%" y="291.50"></text></g><g><title>acir::arithmetic (81 gates, 0.29%)</title><rect x="95.0838%" y="253" width="0.2857%" height="23" fill="rgb(255,242,242)" fg:x="26961" fg:w="81"/><text x="95.3338%" y="267.50"></text></g><g><title>aztec_address.nr:91:21::sqrt(y_squared) (810 gates, 2.86%)</title><rect x="92.7032%" y="301" width="2.8566%" height="23" fill="rgb(255,224,224)" fg:x="26286" fg:w="810"/><text x="92.9532%" y="315.50">az..</text></g><g><title>field.nr:87:9::z *= if b == 1 { 1 } else { c } (54 gates, 0.19%)</title><rect x="95.3694%" y="277" width="0.1904%" height="23" fill="rgb(255,243,243)" fg:x="27042" fg:w="54"/><text x="95.6194%" y="291.50"></text></g><g><title>acir::arithmetic (54 gates, 0.19%)</title><rect x="95.3694%" y="253" width="0.1904%" height="23" fill="rgb(255,243,243)" fg:x="27042" fg:w="54"/><text x="95.6194%" y="267.50"></text></g><g><title>bn254.nr:105:15::a == b (3 gates, 0.01%)</title><rect x="95.5599%" y="229" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="27096" fg:w="3"/><text x="95.8099%" y="243.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="95.5599%" y="205" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="27096" fg:w="3"/><text x="95.8099%" y="219.50"></text></g><g><title>bn254.nr:110:16::field_less_than(a, b) (1 gates, 0.00%)</title><rect x="95.5704%" y="229" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27099" fg:w="1"/><text x="95.8204%" y="243.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="95.5704%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27099" fg:w="1"/><text x="95.8204%" y="219.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="95.5740%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27100" fg:w="2"/><text x="95.8240%" y="147.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.5740%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27100" fg:w="8"/><text x="95.8240%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.5740%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27100" fg:w="8"/><text x="95.8240%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.5810%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27102" fg:w="6"/><text x="95.8310%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.6022%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27108" fg:w="1"/><text x="95.8522%" y="147.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.6022%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27108" fg:w="9"/><text x="95.8522%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.6022%" y="157" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27108" fg:w="9"/><text x="95.8522%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="95.6057%" y="133" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27109" fg:w="8"/><text x="95.8557%" y="147.50"></text></g><g><title>bn254.nr:70:23::x, xlo + TWO_POW_128 * xhi (4 gates, 0.01%)</title><rect x="95.6339%" y="181" width="0.0141%" height="23" fill="rgb(255,248,248)" fg:x="27117" fg:w="4"/><text x="95.8839%" y="195.50"></text></g><g><title>acir::arithmetic (4 gates, 0.01%)</title><rect x="95.6339%" y="157" width="0.0141%" height="23" fill="rgb(255,248,248)" fg:x="27117" fg:w="4"/><text x="95.8839%" y="171.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="95.6480%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27121" fg:w="1"/><text x="95.8980%" y="171.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="95.6480%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27121" fg:w="1"/><text x="95.8980%" y="147.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="95.6516%" y="109" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27122" fg:w="2"/><text x="95.9016%" y="123.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.6516%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27122" fg:w="8"/><text x="95.9016%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.6516%" y="133" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27122" fg:w="8"/><text x="95.9016%" y="147.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.6586%" y="109" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27124" fg:w="6"/><text x="95.9086%" y="123.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.6798%" y="109" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27130" fg:w="1"/><text x="95.9298%" y="123.50"></text></g><g><title>bn254.nr:87:23::decompose(a) (37 gates, 0.13%)</title><rect x="95.5740%" y="205" width="0.1305%" height="23" fill="rgb(255,244,244)" fg:x="27100" fg:w="37"/><text x="95.8240%" y="219.50"></text></g><g><title>bn254.nr:73:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (16 gates, 0.06%)</title><rect x="95.6480%" y="181" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="27121" fg:w="16"/><text x="95.8980%" y="195.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.6798%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27130" fg:w="7"/><text x="95.9298%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.6798%" y="133" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27130" fg:w="7"/><text x="95.9298%" y="147.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.6833%" y="109" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27131" fg:w="6"/><text x="95.9333%" y="123.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.7045%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27137" fg:w="1"/><text x="95.9545%" y="147.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.7045%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27137" fg:w="7"/><text x="95.9545%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.7045%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27137" fg:w="7"/><text x="95.9545%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.7080%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27138" fg:w="6"/><text x="95.9580%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.7291%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27144" fg:w="1"/><text x="95.9791%" y="147.50"></text></g><g><title>bn254.nr:88:23::decompose(b) (16 gates, 0.06%)</title><rect x="95.7045%" y="205" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="27137" fg:w="16"/><text x="95.9545%" y="219.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.7291%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27144" fg:w="9"/><text x="95.9791%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.7291%" y="157" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27144" fg:w="9"/><text x="95.9791%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="95.7327%" y="133" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27145" fg:w="8"/><text x="95.9827%" y="147.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="95.7609%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27153" fg:w="1"/><text x="96.0109%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="95.7609%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27153" fg:w="1"/><text x="96.0109%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="95.7644%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27154" fg:w="2"/><text x="96.0144%" y="147.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.7644%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27154" fg:w="8"/><text x="96.0144%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.7644%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27154" fg:w="8"/><text x="96.0144%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.7715%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27156" fg:w="6"/><text x="96.0215%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.7926%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27162" fg:w="1"/><text x="96.0426%" y="147.50"></text></g><g><title>bn254.nr:111:17::assert_gt(b, a) (69 gates, 0.24%)</title><rect x="95.5740%" y="229" width="0.2433%" height="23" fill="rgb(255,242,242)" fg:x="27100" fg:w="69"/><text x="95.8240%" y="243.50"></text></g><g><title>bn254.nr:91:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="95.7609%" y="205" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="27153" fg:w="16"/><text x="96.0109%" y="219.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.7926%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27162" fg:w="7"/><text x="96.0426%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.7926%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27162" fg:w="7"/><text x="96.0426%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.7962%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27163" fg:w="6"/><text x="96.0462%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.8173%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27169" fg:w="1"/><text x="96.0673%" y="147.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.8173%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27169" fg:w="7"/><text x="96.0673%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.8173%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27169" fg:w="7"/><text x="96.0673%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.8208%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27170" fg:w="6"/><text x="96.0708%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.8420%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27176" fg:w="1"/><text x="96.0920%" y="147.50"></text></g><g><title>bn254.nr:87:23::decompose(a) (16 gates, 0.06%)</title><rect x="95.8173%" y="205" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="27169" fg:w="16"/><text x="96.0673%" y="219.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.8420%" y="181" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27176" fg:w="9"/><text x="96.0920%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.8420%" y="157" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27176" fg:w="9"/><text x="96.0920%" y="171.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="95.8455%" y="133" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27177" fg:w="8"/><text x="96.0955%" y="147.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="95.8737%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27185" fg:w="2"/><text x="96.1237%" y="147.50"></text></g><g><title>bn254.nr:66:13::xlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.8737%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27185" fg:w="8"/><text x="96.1237%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.8737%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27185" fg:w="8"/><text x="96.1237%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.8808%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27187" fg:w="6"/><text x="96.1308%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.9020%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27193" fg:w="1"/><text x="96.1520%" y="147.50"></text></g><g><title>bn254.nr:67:13::xhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.9020%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27193" fg:w="7"/><text x="96.1520%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="95.9020%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27193" fg:w="7"/><text x="96.1520%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.9055%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27194" fg:w="6"/><text x="96.1555%" y="147.50"></text></g><g><title>bn254.nr:70:23::x, xlo + TWO_POW_128 * xhi (3 gates, 0.01%)</title><rect x="95.9266%" y="181" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="27200" fg:w="3"/><text x="96.1766%" y="195.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="95.9266%" y="157" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="27200" fg:w="3"/><text x="96.1766%" y="171.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="95.9372%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27203" fg:w="1"/><text x="96.1872%" y="171.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="95.9372%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27203" fg:w="1"/><text x="96.1872%" y="147.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="95.9408%" y="109" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27204" fg:w="2"/><text x="96.1908%" y="123.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.9408%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27204" fg:w="8"/><text x="96.1908%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="95.9408%" y="133" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27204" fg:w="8"/><text x="96.1908%" y="147.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="95.9478%" y="109" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27206" fg:w="6"/><text x="96.1978%" y="123.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="95.9690%" y="109" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27212" fg:w="1"/><text x="96.2190%" y="123.50"></text></g><g><title>bn254.nr:88:23::decompose(b) (36 gates, 0.13%)</title><rect x="95.8737%" y="205" width="0.1270%" height="23" fill="rgb(255,244,244)" fg:x="27185" fg:w="36"/><text x="96.1237%" y="219.50"></text></g><g><title>bn254.nr:73:13::assert_gt_limbs((PLO, PHI), (xlo, xhi)) (18 gates, 0.06%)</title><rect x="95.9372%" y="181" width="0.0635%" height="23" fill="rgb(255,246,246)" fg:x="27203" fg:w="18"/><text x="96.1872%" y="195.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.9690%" y="157" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27212" fg:w="9"/><text x="96.2190%" y="171.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (9 gates, 0.03%)</title><rect x="95.9690%" y="133" width="0.0317%" height="23" fill="rgb(255,247,247)" fg:x="27212" fg:w="9"/><text x="96.2190%" y="147.50"></text></g><g><title>acir::blackbox::range (8 gates, 0.03%)</title><rect x="95.9725%" y="109" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27213" fg:w="8"/><text x="96.2225%" y="123.50"></text></g><g><title>bn254.nr:45:22::lte_hint(alo, blo) (1 gates, 0.00%)</title><rect x="96.0007%" y="181" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27221" fg:w="1"/><text x="96.2507%" y="195.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="96.0007%" y="157" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27221" fg:w="1"/><text x="96.2507%" y="171.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="96.0042%" y="133" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27222" fg:w="2"/><text x="96.2542%" y="147.50"></text></g><g><title>bn254.nr:50:9::rlo.assert_max_bit_size (8 gates, 0.03%)</title><rect x="96.0042%" y="181" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27222" fg:w="8"/><text x="96.2542%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (8 gates, 0.03%)</title><rect x="96.0042%" y="157" width="0.0282%" height="23" fill="rgb(255,247,247)" fg:x="27222" fg:w="8"/><text x="96.2542%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="96.0113%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27224" fg:w="6"/><text x="96.2613%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="96.0324%" y="133" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="27230" fg:w="1"/><text x="96.2824%" y="147.50"></text></g><g><title>aztec_address.nr:96:15::y.lt (141 gates, 0.50%)</title><rect x="95.5599%" y="301" width="0.4973%" height="23" fill="rgb(255,239,239)" fg:x="27096" fg:w="141"/><text x="95.8099%" y="315.50"></text></g><g><title>mod.nr:240:13::bn254_lt(self, another) (141 gates, 0.50%)</title><rect x="95.5599%" y="277" width="0.4973%" height="23" fill="rgb(255,239,239)" fg:x="27096" fg:w="141"/><text x="95.8099%" y="291.50"></text></g><g><title>bn254.nr:122:5::gt(b, a) (141 gates, 0.50%)</title><rect x="95.5599%" y="253" width="0.4973%" height="23" fill="rgb(255,239,239)" fg:x="27096" fg:w="141"/><text x="95.8099%" y="267.50"></text></g><g><title>bn254.nr:114:17::assert_gt(a, b) (68 gates, 0.24%)</title><rect x="95.8173%" y="229" width="0.2398%" height="23" fill="rgb(255,242,242)" fg:x="27169" fg:w="68"/><text x="96.0673%" y="243.50"></text></g><g><title>bn254.nr:91:9::assert_gt_limbs(a_limbs, b_limbs) (16 gates, 0.06%)</title><rect x="96.0007%" y="205" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="27221" fg:w="16"/><text x="96.2507%" y="219.50"></text></g><g><title>bn254.nr:51:9::rhi.assert_max_bit_size (7 gates, 0.02%)</title><rect x="96.0324%" y="181" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27230" fg:w="7"/><text x="96.2824%" y="195.50"></text></g><g><title>mod.nr:17:9::self.__assert_max_bit_size (7 gates, 0.02%)</title><rect x="96.0324%" y="157" width="0.0247%" height="23" fill="rgb(255,247,247)" fg:x="27230" fg:w="7"/><text x="96.2824%" y="171.50"></text></g><g><title>acir::blackbox::range (6 gates, 0.02%)</title><rect x="96.0360%" y="133" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="27231" fg:w="6"/><text x="96.2860%" y="147.50"></text></g><g><title>aztec_address.nr:96:43::y.eq (2 gates, 0.01%)</title><rect x="96.0571%" y="301" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27237" fg:w="2"/><text x="96.3071%" y="315.50"></text></g><g><title>cmp.nr:34:9::self == other (2 gates, 0.01%)</title><rect x="96.0571%" y="277" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27237" fg:w="2"/><text x="96.3071%" y="291.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="96.0571%" y="253" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="27237" fg:w="2"/><text x="96.3071%" y="267.50"></text></g><g><title>ecdh_shared_secret.nr:27:49::recipient_address.to_address_point (957 gates, 3.38%)</title><rect x="92.6997%" y="325" width="3.3751%" height="23" fill="rgb(255,222,222)" fg:x="26285" fg:w="957"/><text x="92.9497%" y="339.50">ecd..</text></g><g><title>aztec_address.nr:97:17::(MAX_FIELD_VALUE + 1) - y (3 gates, 0.01%)</title><rect x="96.0642%" y="301" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="27239" fg:w="3"/><text x="96.3142%" y="315.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="96.0642%" y="277" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="27239" fg:w="3"/><text x="96.3142%" y="291.50"></text></g><g><title>embedded_curve_ops.nr:110:23::multi_scalar_mul_array_return(points, scalars) (760 gates, 2.68%)</title><rect x="96.0748%" y="277" width="2.6803%" height="23" fill="rgb(255,225,225)" fg:x="27242" fg:w="760"/><text x="96.3248%" y="291.50">em..</text></g><g><title>acir::blackbox::multi_scalar_mul (760 gates, 2.68%)</title><rect x="96.0748%" y="253" width="2.6803%" height="23" fill="rgb(255,225,225)" fg:x="27242" fg:w="760"/><text x="96.3248%" y="267.50">ac..</text></g><g><title>acir::arithmetic (4 gates, 0.01%)</title><rect x="98.7551%" y="253" width="0.0141%" height="23" fill="rgb(255,248,248)" fg:x="28002" fg:w="4"/><text x="99.0051%" y="267.50"></text></g><g><title>note.nr:190:29::compute_log(*context, note, storage_slot, recipient, sender) (22,832 gates, 80.52%)</title><rect x="18.3037%" y="397" width="80.5220%" height="23" fill="rgb(255,115,115)" fg:x="5190" fg:w="22832"/><text x="18.5537%" y="411.50">note.nr:190:29::compute_log(*context, note, storage_slot, recipient, sender)</text></g><g><title>note.nr:157:5::encrypt_log(context.this_address(), final_plaintext, recipient, sender) (22,832 gates, 80.52%)</title><rect x="18.3037%" y="373" width="80.5220%" height="23" fill="rgb(255,115,115)" fg:x="5190" fg:w="22832"/><text x="18.5537%" y="387.50">note.nr:157:5::encrypt_log(context.this_address(), final_plaintext, recipient, sender)</text></g><g><title>encryption.nr:95:36::derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient) (1,737 gates, 6.13%)</title><rect x="92.6997%" y="349" width="6.1259%" height="23" fill="rgb(255,212,212)" fg:x="26285" fg:w="1737"/><text x="92.9497%" y="363.50">encrypti..</text></g><g><title>ecdh_shared_secret.nr:27:5::derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner) (780 gates, 2.75%)</title><rect x="96.0748%" y="325" width="2.7508%" height="23" fill="rgb(255,225,225)" fg:x="27242" fg:w="780"/><text x="96.3248%" y="339.50">ec..</text></g><g><title>ecdh_shared_secret.nr:15:25::multi_scalar_mul([public_key], [secret]) (780 gates, 2.75%)</title><rect x="96.0748%" y="301" width="2.7508%" height="23" fill="rgb(255,225,225)" fg:x="27242" fg:w="780"/><text x="96.3248%" y="315.50">ec..</text></g><g><title>embedded_curve_ops.nr:111:77::point_array[2] as bool (20 gates, 0.07%)</title><rect x="98.7551%" y="277" width="0.0705%" height="23" fill="rgb(255,246,246)" fg:x="28002" fg:w="20"/><text x="99.0051%" y="291.50"></text></g><g><title>acir::blackbox::range (16 gates, 0.06%)</title><rect x="98.7692%" y="253" width="0.0564%" height="23" fill="rgb(255,246,246)" fg:x="28006" fg:w="16"/><text x="99.0192%" y="267.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="98.8256%" y="325" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28022" fg:w="1"/><text x="99.0756%" y="339.50"></text></g><g><title>easy_private_uint.nr:32:9::self.set.insert(addend_note).emit (22,836 gates, 80.54%)</title><rect x="18.3037%" y="445" width="80.5361%" height="23" fill="rgb(255,115,115)" fg:x="5190" fg:w="22836"/><text x="18.5537%" y="459.50">easy_private_uint.nr:32:9::self.set.insert(addend_note).emit</text></g><g><title>note_emission.nr:17:9::_emit(self) (22,836 gates, 80.54%)</title><rect x="18.3037%" y="421" width="80.5361%" height="23" fill="rgb(255,115,115)" fg:x="5190" fg:w="22836"/><text x="18.5537%" y="435.50">note_emission.nr:17:9::_emit(self)</text></g><g><title>note.nr:191:9::context.emit_raw_note_log (4 gates, 0.01%)</title><rect x="98.8256%" y="397" width="0.0141%" height="23" fill="rgb(255,248,248)" fg:x="28022" fg:w="4"/><text x="99.0756%" y="411.50"></text></g><g><title>private_context.nr:337:23::self.next_counter (4 gates, 0.01%)</title><rect x="98.8256%" y="373" width="0.0141%" height="23" fill="rgb(255,248,248)" fg:x="28022" fg:w="4"/><text x="99.0756%" y="387.50"></text></g><g><title>private_context.nr:553:9::self.side_effect_counter += 1 (4 gates, 0.01%)</title><rect x="98.8256%" y="349" width="0.0141%" height="23" fill="rgb(255,248,248)" fg:x="28022" fg:w="4"/><text x="99.0756%" y="363.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.01%)</title><rect x="98.8291%" y="325" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28023" fg:w="3"/><text x="99.0791%" y="339.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="98.8397%" y="205" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28026" fg:w="1"/><text x="99.0897%" y="219.50"></text></g><g><title>poseidon2.nr:72:17::sponge.absorb (78 gates, 0.28%)</title><rect x="98.8397%" y="277" width="0.2751%" height="23" fill="rgb(255,242,242)" fg:x="28026" fg:w="78"/><text x="99.0897%" y="291.50"></text></g><g><title>poseidon2.nr:42:13::self.perform_duplex (78 gates, 0.28%)</title><rect x="98.8397%" y="253" width="0.2751%" height="23" fill="rgb(255,242,242)" fg:x="28026" fg:w="78"/><text x="99.0897%" y="267.50"></text></g><g><title>poseidon2.nr:35:22::crate::hash::poseidon2_permutation(self.state, 4) (78 gates, 0.28%)</title><rect x="98.8397%" y="229" width="0.2751%" height="23" fill="rgb(255,242,242)" fg:x="28026" fg:w="78"/><text x="99.0897%" y="243.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.27%)</title><rect x="98.8432%" y="205" width="0.2716%" height="23" fill="rgb(255,242,242)" fg:x="28027" fg:w="77"/><text x="99.0932%" y="219.50"></text></g><g><title>acir::arithmetic (2 gates, 0.01%)</title><rect x="99.1148%" y="205" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="28104" fg:w="2"/><text x="99.3648%" y="219.50"></text></g><g><title>lifecycle.nr:21:21::note.compute_note_hash (157 gates, 0.55%)</title><rect x="98.8397%" y="397" width="0.5537%" height="23" fill="rgb(255,238,238)" fg:x="28026" fg:w="157"/><text x="99.0897%" y="411.50"></text></g><g><title>notes.nr:91:17::aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH) (157 gates, 0.55%)</title><rect x="98.8397%" y="373" width="0.5537%" height="23" fill="rgb(255,238,238)" fg:x="28026" fg:w="157"/><text x="99.0897%" y="387.50"></text></g><g><title>hash.nr:246:5::poseidon2_hash(inputs_with_separator) (157 gates, 0.55%)</title><rect x="98.8397%" y="349" width="0.5537%" height="23" fill="rgb(255,238,238)" fg:x="28026" fg:w="157"/><text x="99.0897%" y="363.50"></text></g><g><title>hash.nr:237:5::std::hash::poseidon2::Poseidon2::hash(inputs, N) (157 gates, 0.55%)</title><rect x="98.8397%" y="325" width="0.5537%" height="23" fill="rgb(255,238,238)" fg:x="28026" fg:w="157"/><text x="99.0897%" y="339.50"></text></g><g><title>poseidon2.nr:16:9::Poseidon2::hash_internal(input, message_size, message_size != N) (157 gates, 0.55%)</title><rect x="98.8397%" y="301" width="0.5537%" height="23" fill="rgb(255,238,238)" fg:x="28026" fg:w="157"/><text x="99.0897%" y="315.50"></text></g><g><title>poseidon2.nr:82:9::sponge.squeeze (79 gates, 0.28%)</title><rect x="99.1148%" y="277" width="0.2786%" height="23" fill="rgb(255,242,242)" fg:x="28104" fg:w="79"/><text x="99.3648%" y="291.50"></text></g><g><title>poseidon2.nr:55:9::self.perform_duplex (79 gates, 0.28%)</title><rect x="99.1148%" y="253" width="0.2786%" height="23" fill="rgb(255,242,242)" fg:x="28104" fg:w="79"/><text x="99.3648%" y="267.50"></text></g><g><title>poseidon2.nr:35:22::crate::hash::poseidon2_permutation(self.state, 4) (79 gates, 0.28%)</title><rect x="99.1148%" y="229" width="0.2786%" height="23" fill="rgb(255,242,242)" fg:x="28104" fg:w="79"/><text x="99.3648%" y="243.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.27%)</title><rect x="99.1218%" y="205" width="0.2716%" height="23" fill="rgb(255,242,242)" fg:x="28106" fg:w="77"/><text x="99.3718%" y="219.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.3934%" y="325" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28183" fg:w="1"/><text x="99.6434%" y="339.50"></text></g><g><title>main.nr:47:9::counters.at(owner).add (22,996 gates, 81.10%)</title><rect x="18.3037%" y="469" width="81.1003%" height="23" fill="rgb(255,114,114)" fg:x="5190" fg:w="22996"/><text x="18.5537%" y="483.50">main.nr:47:9::counters.at(owner).add</text></g><g><title>easy_private_uint.nr:32:9::self.set.insert (160 gates, 0.56%)</title><rect x="98.8397%" y="445" width="0.5643%" height="23" fill="rgb(255,238,238)" fg:x="28026" fg:w="160"/><text x="99.0897%" y="459.50"></text></g><g><title>private_set.nr:50:9::create_note(self.context, self.storage_slot, note) (160 gates, 0.56%)</title><rect x="98.8397%" y="421" width="0.5643%" height="23" fill="rgb(255,238,238)" fg:x="28026" fg:w="160"/><text x="99.0897%" y="435.50"></text></g><g><title>lifecycle.nr:32:5::context.push_note_hash (3 gates, 0.01%)</title><rect x="99.3934%" y="397" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28183" fg:w="3"/><text x="99.6434%" y="411.50"></text></g><g><title>private_context.nr:147:69::self.next_counter (3 gates, 0.01%)</title><rect x="99.3934%" y="373" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28183" fg:w="3"/><text x="99.6434%" y="387.50"></text></g><g><title>private_context.nr:553:9::self.side_effect_counter += 1 (3 gates, 0.01%)</title><rect x="99.3934%" y="349" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28183" fg:w="3"/><text x="99.6434%" y="363.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="99.3969%" y="325" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="28184" fg:w="2"/><text x="99.6469%" y="339.50"></text></g><g><title>acir::arithmetic (3 gates, 0.01%)</title><rect x="99.4040%" y="277" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28186" fg:w="3"/><text x="99.6540%" y="291.50"></text></g><g><title>map.nr:39:36::derive_storage_slot_in_map(self.storage_slot, key) (80 gates, 0.28%)</title><rect x="99.4040%" y="445" width="0.2821%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="80"/><text x="99.6540%" y="459.50"></text></g><g><title>map.nr:7:5::poseidon2_hash([storage_slot, key.to_field()]) (80 gates, 0.28%)</title><rect x="99.4040%" y="421" width="0.2821%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="80"/><text x="99.6540%" y="435.50"></text></g><g><title>hash.nr:237:5::std::hash::poseidon2::Poseidon2::hash(inputs, N) (80 gates, 0.28%)</title><rect x="99.4040%" y="397" width="0.2821%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="80"/><text x="99.6540%" y="411.50"></text></g><g><title>poseidon2.nr:16:9::Poseidon2::hash_internal(input, message_size, message_size != N) (80 gates, 0.28%)</title><rect x="99.4040%" y="373" width="0.2821%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="80"/><text x="99.6540%" y="387.50"></text></g><g><title>poseidon2.nr:82:9::sponge.squeeze (80 gates, 0.28%)</title><rect x="99.4040%" y="349" width="0.2821%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="80"/><text x="99.6540%" y="363.50"></text></g><g><title>poseidon2.nr:55:9::self.perform_duplex (80 gates, 0.28%)</title><rect x="99.4040%" y="325" width="0.2821%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="80"/><text x="99.6540%" y="339.50"></text></g><g><title>poseidon2.nr:35:22::crate::hash::poseidon2_permutation(self.state, 4) (80 gates, 0.28%)</title><rect x="99.4040%" y="301" width="0.2821%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="80"/><text x="99.6540%" y="315.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.27%)</title><rect x="99.4146%" y="277" width="0.2716%" height="23" fill="rgb(255,242,242)" fg:x="28189" fg:w="77"/><text x="99.6646%" y="291.50"></text></g><g><title>main.nr:47:9::counters.at (81 gates, 0.29%)</title><rect x="99.4040%" y="469" width="0.2857%" height="23" fill="rgb(255,242,242)" fg:x="28186" fg:w="81"/><text x="99.6540%" y="483.50"></text></g><g><title>map.nr:42:9::state_var_constructor(self.context, derived_storage_slot) (1 gates, 0.00%)</title><rect x="99.6861%" y="445" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28266" fg:w="1"/><text x="99.9361%" y="459.50"></text></g><g><title>storage.nr:115:23::container_struct.name();

    if is_storage_map(typ) {
        // Map state variables recursively initialize their contents - this includes nested maps.
        let (value_constructor, _) =
            generate_storage_field_constructor(generics[1], quote { slot }, true);
        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)
    } else {
        let storage_size = if parent_is_map {
            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result
            // in slots very far away from one another.
            1
        } else {
            let (_, container_struct_generics) = typ.as_data_type().unwrap();
            let stored_struct = container_struct_generics[0];

            if is_note(stored_struct) {
                // Private notes always occupy a single slot, since the slot is only used as a state variable
                // identifier.
                1
            } else {
                get_storage_size(typ)
            }
        };

        // We assume below that all state variables implement `fn new&lt;Context&gt;(context: Context, slot: Field) -&gt; Self`.
        (quote { $struct_name::new(context, $slot) (1 gates, 0.00%)</title><rect x="99.6861%" y="421" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28266" fg:w="1"/><text x="99.9361%" y="435.50"></text></g><g><title>easy_private_uint.nr:18:16::storage_slot != 0 (1 gates, 0.00%)</title><rect x="99.6861%" y="397" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28266" fg:w="1"/><text x="99.9361%" y="411.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.6861%" y="373" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28266" fg:w="1"/><text x="99.9361%" y="387.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.6896%" y="373" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28267" fg:w="1"/><text x="99.9396%" y="387.50"></text></g><g><title>utils.nr:380:5::f&quot;dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&amp;mut context);&quot;
        .quoted_contents() (3 gates, 0.01%)</title><rect x="99.6896%" y="469" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28267" fg:w="3"/><text x="99.9396%" y="483.50"></text></g><g><title>initialization_utils.nr:33:5::context.push_nullifier_read_request (3 gates, 0.01%)</title><rect x="99.6896%" y="445" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28267" fg:w="3"/><text x="99.9396%" y="459.50"></text></g><g><title>private_context.nr:250:64::self.next_counter (3 gates, 0.01%)</title><rect x="99.6896%" y="421" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28267" fg:w="3"/><text x="99.9396%" y="435.50"></text></g><g><title>private_context.nr:553:9::self.side_effect_counter += 1 (3 gates, 0.01%)</title><rect x="99.6896%" y="397" width="0.0106%" height="23" fill="rgb(255,248,248)" fg:x="28267" fg:w="3"/><text x="99.9396%" y="411.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.01%)</title><rect x="99.6932%" y="373" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="28268" fg:w="2"/><text x="99.9432%" y="387.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.7002%" y="421" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28270" fg:w="1"/><text x="99.9502%" y="435.50"></text></g><g><title>utils.nr:61:27::dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name)) (2 gates, 0.01%)</title><rect x="99.7002%" y="469" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="28270" fg:w="2"/><text x="99.9502%" y="483.50"></text></g><g><title>private_context.nr:96:34::inputs.start_side_effect_counter + 1 (2 gates, 0.01%)</title><rect x="99.7002%" y="445" width="0.0071%" height="23" fill="rgb(255,248,248)" fg:x="28270" fg:w="2"/><text x="99.9502%" y="459.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="99.7038%" y="421" width="0.0035%" height="23" fill="rgb(255,249,249)" fg:x="28271" fg:w="1"/><text x="99.9538%" y="435.50"></text></g><g><title>acir::arithmetic (6 gates, 0.02%)</title><rect x="99.7073%" y="325" width="0.0212%" height="23" fill="rgb(255,247,247)" fg:x="28272" fg:w="6"/><text x="99.9573%" y="339.50"></text></g><g><title>all (28,355 gates, 100%)</title><rect x="0.0000%" y="493" width="100.0000%" height="23" fill="rgb(255,100,100)" fg:x="0" fg:w="28355"/><text x="0.2500%" y="507.50"></text></g><g><title>utils.nr:61:93::dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name) (83 gates, 0.29%)</title><rect x="99.7073%" y="469" width="0.2927%" height="23" fill="rgb(255,241,241)" fg:x="28272" fg:w="83"/><text x="99.9573%" y="483.50"></text></g><g><title>hash.nr:64:9::hash_args(self.fields) (83 gates, 0.29%)</title><rect x="99.7073%" y="445" width="0.2927%" height="23" fill="rgb(255,241,241)" fg:x="28272" fg:w="83"/><text x="99.9573%" y="459.50"></text></g><g><title>hash.nr:98:9::poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS) (83 gates, 0.29%)</title><rect x="99.7073%" y="421" width="0.2927%" height="23" fill="rgb(255,241,241)" fg:x="28272" fg:w="83"/><text x="99.9573%" y="435.50"></text></g><g><title>hash.nr:432:5::sponge.squeeze (83 gates, 0.29%)</title><rect x="99.7073%" y="397" width="0.2927%" height="23" fill="rgb(255,241,241)" fg:x="28272" fg:w="83"/><text x="99.9573%" y="411.50"></text></g><g><title>poseidon2.nr:59:9::self.perform_duplex (83 gates, 0.29%)</title><rect x="99.7073%" y="373" width="0.2927%" height="23" fill="rgb(255,241,241)" fg:x="28272" fg:w="83"/><text x="99.9573%" y="387.50"></text></g><g><title>poseidon2.nr:39:22::std::hash::poseidon2_permutation(self.state, 4) (83 gates, 0.29%)</title><rect x="99.7073%" y="349" width="0.2927%" height="23" fill="rgb(255,241,241)" fg:x="28272" fg:w="83"/><text x="99.9573%" y="363.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.27%)</title><rect x="99.7284%" y="325" width="0.2716%" height="23" fill="rgb(255,242,242)" fg:x="28278" fg:w="77"/><text x="99.9784%" y="339.50"></text></g></svg></svg>